package com.example.media_poc.storage;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

/**
 * Контракт для доступа к хранилищу видео-контента.
 * Определяет операции чтения данных по частям, получения общего размера ресурса
 * и просмотра списка всех доступных ключей (имён файлов).
 *
 * Любая реализация этого интерфейса (локальная файловая система, S3, БД и т. д.)
 * должна обеспечить:
 *  - случайный доступ к байтам через {@link #readChunk(String, long, int)}
 *  - возможность узнать общий размер через {@link #size(String)}
 *  - выдачу списка всех ключей через {@link #listKeys()}
 */

public interface VideoStorage {
    /**
     * Читает кусок данных длиной {@code length} байт из ресурса с именем {@code key},
     * начиная с указанного смещения {@code offset}.
     *
     * Реализация должна поддерживать случайный доступ: сначала перейти к {@code offset},
     * затем вернуть ровно {@code length} байт либо меньше, если до конца ресурса осталось меньше данных.
     *
     * @param key    уникальный идентификатор или путь к видео-ресурсу
     * @param offset начальная позиция в байтах (0-based)
     * @param length максимальное число байт, которое нужно прочитать
     * @return InputStream, из которого можно считать требуемый фрагмент
     * @throws IOException при ошибках I/O (файл не найден, сбой чтения и т.д.)
     */
    InputStream readChunk(String key, long offset, int length) throws IOException;

    /**
     * Возвращает полный размер видео-ресурса в байтах.
     *
     * Используется для расчёта максимально возможного диапазона при
     * обработке HTTP-Range запросов.
     *
     * @param key уникальный идентификатор или путь к видео-ресурсу
     * @return общее количество байт в ресурсе
     * @throws IOException при ошибках I/O (невозможно определить размер)
     */
    long size(String key) throws IOException;

    /**
     * Возвращает список всех ключей (имён файлов) доступных видео-ресурсов.
     *
     * Позволяет динамически собирать плейлисты без хардкода имён и количества файлов.
     *
     * @return список строк — имена всех видеофайлов в хранилище
     */
    List<String> listKeys();
}
